Index: clever-refuel-core/calculate_gas_usage/run.py
===================================================================
diff --git a/clever-refuel-core/calculate_gas_usage/run.py b/clever-refuel-core/calculate_gas_usage/run.py
deleted file mode 100644
--- a/clever-refuel-core/calculate_gas_usage/run.py	(revision 9b2724f78da9ce0f692c2a0e4aabae6711071604)
+++ /dev/null	(revision 9b2724f78da9ce0f692c2a0e4aabae6711071604)
@@ -1,13 +0,0 @@
-import os
-import csv
-
-from fixed_path_gas_station_problem_algorithm import *
-from naive import *
-from csv_parser import read_route_file
-
-
-if __name__ == "__main__":
-    route = read_route_file("../../data/Fahrzeugrouten/Bertha Benz Memorial Route.csv")
-
-    calculate_naively(route)
-    calculate_using_fixed_path_gas_station_problem_algorithm(route)
Index: clever-refuel-core/model/tank_stop.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from datetime import datetime\r\n\r\nfrom .gas_station_meta import GasStationMeta\r\n\r\n\r\nclass TankStop:\r\n    # Meta\r\n    id: int\r\n    meta: GasStationMeta\r\n\r\n    # Fields required to calculate optimal refueling strategy\r\n    timestamp: datetime\r\n    predicted_price_per_liter: float\r\n    current_fuel_amount: float\r\n    amount_to_refuel: float\r\n\r\n    # Fields that are required additionally to use the fixed path gas station problem algorithm\r\n    previous_station: None\r\n    current_station: None\r\n    next_station: None\r\n\r\n    def __init__(self, timestamp, id) -> None:\r\n        self.timestamp = timestamp\r\n        self.id = id\r\n\r\n    def set_meta(self, meta: GasStationMeta) -> None:\r\n        self.meta = meta\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/clever-refuel-core/model/tank_stop.py b/clever-refuel-core/model/tank_stop.py
--- a/clever-refuel-core/model/tank_stop.py	(revision 9b2724f78da9ce0f692c2a0e4aabae6711071604)
+++ b/clever-refuel-core/model/tank_stop.py	(date 1641464566818)
@@ -2,7 +2,9 @@
 
 from .gas_station_meta import GasStationMeta
 
-
+"""
+Represents additional information 
+"""
 class TankStop:
     # Meta
     id: int
Index: clever-refuel-core/model/gas_station_meta.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class GasStationMeta:\r\n    name: str\r\n    brand: str\r\n    street: str\r\n    street_number: int\r\n    plz: int\r\n    city: str\r\n    lat: float\r\n    long: float\r\n\r\n    def __init__(self, name, brand, street, street_number, plz, city, lat, long):\r\n        self.name = name\r\n        self.brand = brand\r\n        self.street = street\r\n        self.street_number = street_number\r\n        self.plz = plz\r\n        self.city = city\r\n        self.lat = lat\r\n        self.long = long\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/clever-refuel-core/model/gas_station_meta.py b/clever-refuel-core/model/gas_station_meta.py
--- a/clever-refuel-core/model/gas_station_meta.py	(revision 9b2724f78da9ce0f692c2a0e4aabae6711071604)
+++ b/clever-refuel-core/model/gas_station_meta.py	(date 1641464566758)
@@ -1,3 +1,6 @@
+"""
+Represents additional information
+"""
 class GasStationMeta:
     name: str
     brand: str
Index: clever-refuel-core/calculate_gas_usage/fixed_path_gas_station_problem_algorithm.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from model.route_data import RouteData\r\nfrom calculate_gas_usage.distance_utils import distance_between\r\nfrom calculate_gas_usage.constants import GAS_PER_KILOMETER\r\nfrom forecast.base_forecast import BaseForecast\r\n\r\n\r\ndef calculate_using_fixed_path_gas_station_problem_algorithm(route: RouteData, forecast: BaseForecast) -> None:\r\n    max_possible_distance = route.fuel_tank_size / GAS_PER_KILOMETER\r\n    prices = []\r\n    distances = []\r\n    optimal_stops = {}\r\n\r\n    money_spent_on_refueling = 0\r\n    total_refueled = 0\r\n    current_fuel = 0\r\n\r\n    # Get necessary data\r\n    for i in range(0, len(route.stops) - 1):\r\n        # Store price prediction\r\n        forecasted_price = forecast.get_forecast_for(route.stops[i])\r\n        prices.append(forecasted_price)\r\n\r\n        # Store distance to following stop, except for last stop\r\n        if i == len(route.stops) - 1:\r\n            break\r\n        distance_to_next = distance_between(route.stops[i], route.stops[i + 1])\r\n        distances.append(distance_to_next)\r\n\r\n    print(prices)\r\n    print(distances)\r\n    print(len(route.stops))\r\n    print(max_possible_distance)\r\n\r\n    # Loop through all gas stations starting from destination\r\n    i = len(route.stops) - 2\r\n    while i > 0:\r\n\r\n        # Break out of loop if destination is reachable\r\n        if sum(distances[0:i]) < max_possible_distance:\r\n            optimal_stops[0] = [\r\n                sum(distances[0:i]) * GAS_PER_KILOMETER,\r\n                prices[0] * (sum(distances[0:i]) * GAS_PER_KILOMETER)\r\n            ]\r\n            break\r\n\r\n        # Loop through stations that are within max_possible_distance\r\n        distance = 0\r\n        cheapest_gas_station_index = None\r\n        cheapest_gas_station_distance = None\r\n        for j in range(i-1, 0, -1):\r\n            distance += distances[j]\r\n\r\n            # Initialize cheapest gas station with closes gas station\r\n            if j == i-1:\r\n                cheapest_gas_station_index = j\r\n                cheapest_gas_station_distance = distance\r\n\r\n            # Quit loop if max_possible_distance is exceeded\r\n            if distance > max_possible_distance:\r\n                break\r\n\r\n            # Replace cheapest gas station with j if it's cheaper\r\n            if prices[j] < prices[cheapest_gas_station_index]:\r\n                cheapest_gas_station_index = j\r\n                cheapest_gas_station_distance = distance\r\n\r\n        optimal_stops[cheapest_gas_station_index] = [\r\n                cheapest_gas_station_distance * GAS_PER_KILOMETER,\r\n                prices[cheapest_gas_station_index] * (cheapest_gas_station_distance * GAS_PER_KILOMETER)\r\n            ]\r\n        i = cheapest_gas_station_index\r\n\r\n    print(optimal_stops)\r\n\r\n    money_spent_on_refueling = 0\r\n    total_refueled = 0\r\n    for gas_station_id, data in reversed(optimal_stops.items()):\r\n        current_stop = route.stops[gas_station_id]\r\n        amount_to_refuel = data[0]\r\n        refuel_cost = data[1]\r\n        money_spent_on_refueling += refuel_cost\r\n        total_refueled += amount_to_refuel\r\n\r\n        print(current_stop.meta.name, \"-->\")\r\n        print(\"Refueling\", round(amount_to_refuel, 2), \"litres for\", round(refuel_cost / 100, 2), \"€\")\r\n        print(\"\")\r\n\r\n    print(\"Total refueled:\", round(total_refueled, 2), \"liters - Total money spend on refueling:\", round(money_spent_on_refueling / 100, 2), \"€\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/clever-refuel-core/calculate_gas_usage/fixed_path_gas_station_problem_algorithm.py b/clever-refuel-core/calculate_gas_usage/fixed_path_gas_station_problem_algorithm.py
--- a/clever-refuel-core/calculate_gas_usage/fixed_path_gas_station_problem_algorithm.py	(revision 9b2724f78da9ce0f692c2a0e4aabae6711071604)
+++ b/clever-refuel-core/calculate_gas_usage/fixed_path_gas_station_problem_algorithm.py	(date 1641464330345)
@@ -4,6 +4,9 @@
 from forecast.base_forecast import BaseForecast
 
 
+"""
+Durchläuft die gegebene Route mit einer optimierten Tankstrategie
+"""
 def calculate_using_fixed_path_gas_station_problem_algorithm(route: RouteData, forecast: BaseForecast) -> None:
     max_possible_distance = route.fuel_tank_size / GAS_PER_KILOMETER
     prices = []
@@ -82,7 +85,7 @@
         total_refueled += amount_to_refuel
 
         print(current_stop.meta.name, "-->")
-        print("Refueling", round(amount_to_refuel, 2), "litres for", round(refuel_cost / 100, 2), "€")
+        print("Refueling", round(amount_to_refuel, 2), "liters for", round(refuel_cost / 100, 2), "€")
         print("")
 
     print("Total refueled:", round(total_refueled, 2), "liters - Total money spend on refueling:", round(money_spent_on_refueling / 100, 2), "€")
Index: clever-refuel-core/calculate_gas_usage/naive.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from model.route_data import RouteData\r\nfrom calculate_gas_usage.distance_utils import distance_between\r\nfrom calculate_gas_usage.constants import GAS_PER_KILOMETER\r\nfrom forecast.base_forecast import BaseForecast\r\n\r\n\r\ndef calculate_naively(route: RouteData, forecast: BaseForecast) -> None:\r\n    max_possible_distance = route.fuel_tank_size / GAS_PER_KILOMETER\r\n    money_spent_on_refueling = 0\r\n    total_refueled = 0\r\n    current_fuel = 0\r\n\r\n    # Loop through all stops in route\r\n    for i in range(0, len(route.stops) - 1):\r\n        current_stop = route.stops[i]\r\n        next_stop = route.stops[i+1]\r\n\r\n        if i == len(route.stops) + 1:\r\n            km_to_next_stop = 0\r\n        else:\r\n            km_to_next_stop = distance_between(route.stops[i], route.stops[i+1])\r\n\r\n        fuel_to_next_stop = km_to_next_stop * GAS_PER_KILOMETER\r\n\r\n        print(current_stop.meta.name, \"-->\", next_stop.meta.name, f\"({round(km_to_next_stop, 2)}km)\")\r\n        print(\"Fuel required to next stop:\", round(fuel_to_next_stop, 2), \"liters\")\r\n        print(\"Current fuel: \" + str(round(current_fuel, 2)) + \" out of \" + str(round(route.fuel_tank_size, 2)) + \"\")\r\n\r\n        if current_fuel < fuel_to_next_stop:\r\n            # Refuel to max tank capacity\r\n            price_prediction = forecast.get_forecast_for(current_stop)\r\n            amount_to_refuel = route.fuel_tank_size - current_fuel\r\n        # Determine distance to destination\r\n        km_to_destination = 0\r\n        j = i\r\n        while km_to_destination < max_possible_distance:\r\n            if j + 1 >= len(route.stops):\r\n                break\r\n            km_to_destination += distance_between(route.stops[j], route.stops[j + 1])\r\n            if km_to_destination > max_possible_distance:\r\n                break\r\n            j += 1\r\n\r\n        if current_fuel < fuel_to_next_stop and i < len(route.stops) - 2:\r\n            price_prediction = forecast.get_forecast_for(current_stop)\r\n\r\n            # If destination is in reach, only refuel the necessary amount\r\n            if km_to_destination < max_possible_distance:\r\n                amount_to_refuel = (km_to_destination * GAS_PER_KILOMETER) - current_fuel\r\n            # Otherwise refuel to max tank capacity\r\n            else:\r\n                amount_to_refuel = route.fuel_tank_size - current_fuel\r\n\r\n            refuel_cost = amount_to_refuel * price_prediction\r\n            money_spent_on_refueling += refuel_cost\r\n            total_refueled += amount_to_refuel\r\n            current_fuel = current_fuel + amount_to_refuel\r\n\r\n            print(\"Refueling\", round(amount_to_refuel, 2), \"litres for\", round(refuel_cost / 100, 2), \"€\")\r\n\r\n        current_fuel -= fuel_to_next_stop\r\n        print(\"\")\r\n\r\n    print(\"Total refueled:\", round(total_refueled, 2), \"liters - Total money spend on refueling:\", round(money_spent_on_refueling / 100, 2), \"€\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/clever-refuel-core/calculate_gas_usage/naive.py b/clever-refuel-core/calculate_gas_usage/naive.py
--- a/clever-refuel-core/calculate_gas_usage/naive.py	(revision 9b2724f78da9ce0f692c2a0e4aabae6711071604)
+++ b/clever-refuel-core/calculate_gas_usage/naive.py	(date 1641464375051)
@@ -4,6 +4,9 @@
 from forecast.base_forecast import BaseForecast
 
 
+"""
+Durchläuft die gegebene Route mit einer naiven Tankstrategie
+"""
 def calculate_naively(route: RouteData, forecast: BaseForecast) -> None:
     max_possible_distance = route.fuel_tank_size / GAS_PER_KILOMETER
     money_spent_on_refueling = 0
@@ -13,12 +16,12 @@
     # Loop through all stops in route
     for i in range(0, len(route.stops) - 1):
         current_stop = route.stops[i]
-        next_stop = route.stops[i+1]
+        next_stop = route.stops[i + 1]
 
         if i == len(route.stops) + 1:
             km_to_next_stop = 0
         else:
-            km_to_next_stop = distance_between(route.stops[i], route.stops[i+1])
+            km_to_next_stop = distance_between(route.stops[i], route.stops[i + 1])
 
         fuel_to_next_stop = km_to_next_stop * GAS_PER_KILOMETER
 
@@ -30,6 +33,7 @@
             # Refuel to max tank capacity
             price_prediction = forecast.get_forecast_for(current_stop)
             amount_to_refuel = route.fuel_tank_size - current_fuel
+
         # Determine distance to destination
         km_to_destination = 0
         j = i
@@ -61,4 +65,5 @@
         current_fuel -= fuel_to_next_stop
         print("")
 
-    print("Total refueled:", round(total_refueled, 2), "liters - Total money spend on refueling:", round(money_spent_on_refueling / 100, 2), "€")
+    print("Total refueled:", round(total_refueled, 2), "liters - Total money spend on refueling:",
+          round(money_spent_on_refueling / 100, 2), "€")
Index: clever-refuel-core/calculate_gas_usage/distance_utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import math\r\n\r\nfrom model.tank_stop import TankStop\r\nfrom model.gas_station_meta import GasStationMeta\r\n\r\n\r\ndef distance_between(stop_a: TankStop, stop_b: TankStop) -> float:\r\n    stop_a_meta: GasStationMeta = stop_a.meta\r\n    stop_b_meta: GasStationMeta = stop_b.meta\r\n\r\n    stop_a_lat: float = stop_a_meta.lat\r\n    stop_a_long: float = stop_a_meta.long\r\n    stop_b_lat: float = stop_b_meta.lat\r\n    stop_b_long: float = stop_b_meta.long\r\n\r\n    # Formular as seen in intellitank.pdf\r\n    # TODO Check for errors\r\n    distance = 6378.388 * math.acos(math.sin(stop_a_lat) * math.sin(stop_b_lat) + (math.cos(stop_a_lat) * math.cos(stop_b_lat) * math.cos(stop_b_long - stop_a_long)))\r\n    return distance / 100\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/clever-refuel-core/calculate_gas_usage/distance_utils.py b/clever-refuel-core/calculate_gas_usage/distance_utils.py
--- a/clever-refuel-core/calculate_gas_usage/distance_utils.py	(revision 9b2724f78da9ce0f692c2a0e4aabae6711071604)
+++ b/clever-refuel-core/calculate_gas_usage/distance_utils.py	(date 1641464566640)
@@ -3,7 +3,9 @@
 from model.tank_stop import TankStop
 from model.gas_station_meta import GasStationMeta
 
-
+"""
+Utility method for calculating the distance between two TankStops
+"""
 def distance_between(stop_a: TankStop, stop_b: TankStop) -> float:
     stop_a_meta: GasStationMeta = stop_a.meta
     stop_b_meta: GasStationMeta = stop_b.meta
@@ -14,6 +16,5 @@
     stop_b_long: float = stop_b_meta.long
 
     # Formular as seen in intellitank.pdf
-    # TODO Check for errors
     distance = 6378.388 * math.acos(math.sin(stop_a_lat) * math.sin(stop_b_lat) + (math.cos(stop_a_lat) * math.cos(stop_b_lat) * math.cos(stop_b_long - stop_a_long)))
     return distance / 100
Index: clever-refuel-core/calculate_gas_usage/constants.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#\r\n# Constants\r\n#\r\nGAS_PER_KILOMETER = 0.056\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/clever-refuel-core/calculate_gas_usage/constants.py b/clever-refuel-core/calculate_gas_usage/constants.py
--- a/clever-refuel-core/calculate_gas_usage/constants.py	(revision 9b2724f78da9ce0f692c2a0e4aabae6711071604)
+++ b/clever-refuel-core/calculate_gas_usage/constants.py	(date 1641464374992)
@@ -1,4 +1,4 @@
-#
-# Constants
-#
+"""
+Constants
+"""
 GAS_PER_KILOMETER = 0.056
